model1 = glm(Freq~Defendant_Race + Victim_Race +
Death_Penalty, family=poisson, data = data)
anova(model1,test="Chi")
1- pchisq(deviance(model1),model1$df.residual)
Death_Penalty = rep(c("Y","N"),4)
Freq = c(19,132,0,9,11,52,6,97)
Victim_Race = rep(c(rep("W",2),rep("B",2)),2)
Defendant_Race = c(rep("W",4),rep("B",4))
data = data.frame(factor(Defendant_Race), factor(Victim_Race), factor(Death_Penalty),Freq)
(data)
Death_Penalty = rep(c("Y","N"),4)
Freq = c(19,132,0,9,11,52,6,97)
Victim_Race = rep(c(rep("W",2),rep("B",2)),2)
Defendant_Race = c(rep("W",4),rep("B",4))
data = data.frame(factor(Defendant_Race), factor(Victim_Race), factor(Death_Penalty),Freq)
(data)
# #ch.5.10 pg34
#All three factors are mutually independent.
# [D][V][P]
# [Defendant_Race][Victim_Race][Death_Penalty]
model1 = glm(Freq~Defendant_Race + Victim_Race +
Death_Penalty, family=poisson, data = data)
anova(model1,test="Chi")
1- pchisq(deviance(model1),model1$df.residual)
#  Sentence is independent of both the defendent’s and the victim’s race
# [DV][P]
#[Defendant_Race Victim_Race][Death_Penalty]
model2 = glm(Freq~Defendant_Race*Victim_Race +
Death_Penalty , family=poisson, data = data)
anova(model2,test="Chi")
1- pchisq(deviance(model2),model2$df.residual)
# Given the defendent’s race, sentence is independent of the victim’s race
# [DV][DP]
#[Defendant_Race Victim_Race][Defendant_Race Death_Penalty]
model3 = glm(Freq~Defendant_Race * Victim_Race +
Defendant_Race*Death_Penalty, family=poisson, data = data)
anova(model3,test="Chi")
1- pchisq(deviance(model3),model3$df.residual)
# Given the victim’s race, sentence is independent of the defendent’s race.
# [VD][VP]
# [Victim_Race Defendant_Race][Victim_Race Death_Penalty]
model4 = glm(Freq~Victim_Race*Defendant_Race +
Victim_Race*Death_Penalty, family=poisson, data = data)
anova(model4,test="Chi")
1- pchisq(deviance(model4),model4$df.residual)
Total = c(rep((19+132),2),rep((0+9),2),rep((11+52),2),rep((6+97),2))
data = data.frame(factor(Defendant_Race), factor(Victim_Race), factor(Death_Penalty),Freq,Total)
new_data = subset(data, subset=(Death_Penalty =='Y'))
(new_data)
# Question3(a) ii
# [Defendant_Race Victim_Race][Death_Penalty]
# [DV][P]
lgmodel2 = glm(Freq/Total ~ 1, family = binomial,data = new_data,weight = Total)
anova(lgmodel2,test="Chi")
1- pchisq(deviance(lgmodel2),lgmodel2$df.residual)
setwd("F:/Deakin")
setwd("F:/Deakin/PPCA_MNAR")
knitr::opts_chunk$set(echo = TRUE)
library(dvmisc)
dosage = c(1.69,1.72,1.76,1.78,1.81,1.84,1.86,1.88)
n = c(59,60,62,56,63,59,62,60)
y = c(6,13,18,28,52,53,61,60)
#ch.4.4 pg11
plot(dosage,log((y+0.5)/(n-y+0.5)))
title("Empirical logits vs dosage")
# This is done to avoid taking the logarithm of zero or one, which would result in undefined or infinite values.
model = glm(y/n~ dosage,weight = n,family = binomial)
summary(model)$coef
plot(dosage,log((y+0.5)/(n-y+0.5)))
abline(-60.10328,33.93416)
title("Empirical logits vs dosage with best fit line")
summary(model)$coef
33.93416 - qnorm(0.975) * 2.902867
33.93416 + qnorm(0.975) * 2.902867
#ch.4.4 pg17
LD_50 = -(-60.10328/33.93416)
LD_50
#ch.4.4 pg17
odd = exp(33.93416 * 0.1) # increase 0.1 unit of dosage that may increase
upper = exp((33.93416 + qnorm(0.975) * 2.902867) * 0.1)
lower = exp((33.93416 - qnorm(0.975)* 2.902867) * 0.1)
(c(lower,upper))
new_data = data.frame(
dosage = c(1.8)
)
predicted = predict(model,new_data, type = "link",se.fit = TRUE)
(predicted$fit) # The probability of fatal for 1.8 dosage
critval <- qnorm(0.975) ## approx 95% CI
upr <- predicted$fit + (critval * predicted$se.fit)
lwr <- predicted$fit - (critval * predicted$se.fit)
(c(logit_prob(lwr),logit_prob(upr)))
new_data = data.frame(
dosage = c(1.8)
)
predicted = predict(model,new_data, type = "link",se.fit = TRUE)
(predicted$fit) # The probability of fatal for 1.8 dosage
critval <- qnorm(0.975) ## approx 95% CI
upr <- predicted$fit + (critval * predicted$se.fit)
lwr <- predicted$fit - (critval * predicted$se.fit)
(c(logit_prob(lwr),logit_prob(upr)))
model
model$df.residual
model
(model$df.residual)
(summary(model))
dev = deviance(model)
(1-pchisq(dev,df = model$df.residual))
pearson = sum(resid(model,type="pearson")^2)
#ch.4.4 pg25
(1-pchisq(pearson,df = model$df.residual))
plot(dosage,residuals(model))
title("Deviance residuals vs. dosage")
model2 = glm(y/n~ dosage + I(dosage^2),weight = n,family = binomial)
summary(model2)
anova(model2,test = "Chi")
(1-pchisq(model2$deviance,model2$df.residual))
1-pchisq(8.526  ,1)
Education=rep(6:17,2)
Agree=c(25,27,75,29,32,36,115,31,28,9,15,3,17,26,91,30,55,50,190,17,18,7,13,3)
Disagree=c(9,15,49,29,45,59,245,70,79,23,110,29,5,16,36,35,67,62,403,92,81,34,115,28)
Sex=rep(1:2,c(12,12))
data =  data.frame(cbind(Education, Agree, Disagree, Sex))
(data)
# additive model 1
# only factor of sex and education (add education first)
modela1 = glm(Agree/(Agree+Disagree) ~ factor(Education) +
factor(Sex), family = binomial,
weight = (Agree + Disagree),data = data)
anova(modela1, test= "Chi")
1-pchisq(15.16,11)
# add interaction term
modelr1 = glm(Agree/(Agree+Disagree) ~ factor(Education)*factor(Sex),
family = binomial, weight = (Agree + Disagree),data = data)
anova(modelr1, test= "Chi")
# additive model 2
# only factor of sex and education (add sex first)
modela2 = glm(Agree/(Agree+Disagree) ~ factor(Sex) + factor(Education),
family = binomial, weight = (Agree + Disagree),data = data)
anova(modela2, test= "Chi")
modelr2 = glm(Agree/(Agree+Disagree) ~ factor(Sex) * factor(Education),
family = binomial, weight = (Agree + Disagree),data = data)
anova(modelr2, test= "Chi")
ordModel1=glm(Agree/(Agree+Disagree)~factor(Sex)*Education+
I(Education^2),family=binomial, weight=(Agree+Disagree),data = data)
anova(ordModel1,test = "Chi")
ordModel2 = step(ordModel1)
anova(ordModel2,test = "Chi")
ordModel2 = step(ordModel1)
anova(ordModel2,test = "Chi")
summary(ordModel2)
View(data)
# Males:
exp(-0.26352)
# Females
2.45543+0.89268
-0.26352-0.08172
exp(-0.34524)
# factor(Sex) * Education + I(Education^2)
anova(ordModel2,test = "Chi")
# factor(Sex) * Education + I(Education^2)
anova(ordModel2,test = "Chi")
# factor(Sex) * Education
anova(ordModel2,test = "Chi")
# add the intersection of education and f(sex) and f(edu)
# try to reduce dimention
ordModel3=glm(Agree/(Agree+Disagree)~factor(Sex)*Education+
factor(Education),family=binomial, weight=(Agree+Disagree),data = data)
anova(ordModel3,test = "Chi")
dev = deviance(ordModel2) -deviance(ordModel3)
dev
df = ordModel2$df.residual-ordModel3$df.residual
df
1-pchisq(dev,df)
dev = deviance(ordModel2) -deviance(ordModel3)
dev
df = ordModel2$df.residual-ordModel3$df.residual
df
1-pchisq(dev,df)
Death_Penalty = rep(c("Y","N"),4)
Freq = c(19,132,0,9,11,52,6,97)
Victim_Race = rep(c(rep("W",2),rep("B",2)),2)
Defendant_Race = c(rep("W",4),rep("B",4))
data = data.frame(factor(Defendant_Race), factor(Victim_Race), factor(Death_Penalty),Freq)
(data)
# #ch.5.10 pg34
#All three factors are mutually independent.
# [D][V][P]
# [Defendant_Race][Victim_Race][Death_Penalty]
model1 = glm(Freq~Defendant_Race + Victim_Race +
Death_Penalty, family=poisson, data = data)
anova(model1,test="Chi")
1- pchisq(deviance(model1),model1$df.residual)
#  Sentence is independent of both the defendent’s and the victim’s race
# [DV][P]
#[Defendant_Race Victim_Race][Death_Penalty]
model2 = glm(Freq~Defendant_Race*Victim_Race +
Death_Penalty , family=poisson, data = data)
anova(model2,test="Chi")
1- pchisq(deviance(model2),model2$df.residual)
# Given the defendent’s race, sentence is independent of the victim’s race
# [DV][DP]
#[Defendant_Race Victim_Race][Defendant_Race Death_Penalty]
model3 = glm(Freq~Defendant_Race * Victim_Race +
Defendant_Race*Death_Penalty, family=poisson, data = data)
anova(model3,test="Chi")
1- pchisq(deviance(model3),model3$df.residual)
# Given the victim’s race, sentence is independent of the defendent’s race.
# [VD][VP]
# [Victim_Race Defendant_Race][Victim_Race Death_Penalty]
model4 = glm(Freq~Victim_Race*Defendant_Race +
Victim_Race*Death_Penalty, family=poisson, data = data)
anova(model4,test="Chi")
1- pchisq(deviance(model4),model4$df.residual)
Total = c(rep((19+132),2),rep((0+9),2),rep((11+52),2),rep((6+97),2))
data = data.frame(factor(Defendant_Race), factor(Victim_Race), factor(Death_Penalty),Freq,Total)
new_data = subset(data, subset=(Death_Penalty =='Y'))
(new_data)
# Question3(a) ii
# [Defendant_Race Victim_Race][Death_Penalty]
# [DV][P]
# Sentence is independent of both the defendant’s and the victim’s race.
lgmodel2 = glm(Freq/Total ~ 1, family = binomial,data = new_data,weight = Total)
anova(lgmodel2,test="Chi")
1- pchisq(deviance(lgmodel2),lgmodel2$df.residual)
#  Sentence is independent of both the defendent’s and the victim’s race
# [DV][P]
#[Defendant_Race Victim_Race][Death_Penalty]
model2 = glm(Freq~Defendant_Race*Victim_Race +
Death_Penalty , family=poisson, data = data)
anova(model2,test="Chi")
1- pchisq(deviance(model2),model2$df.residual)
model2
#  Sentence is independent of both the defendent’s and the victim’s race
# [DV][P]
#[Defendant_Race Victim_Race][Death_Penalty]
model2 = glm(Freq~Defendant_Race*Victim_Race +
Death_Penalty , family=poisson, data = data)
anova(model2,test="Chi")
1- pchisq(deviance(model2),model2$df.residual)
# Question3(a) iii
# [Defendant_Race Victim_Race][Defendant_Race Death_Penalty]
# [DV][DP]
#  Given the defendant’s race, sentence is independent of the victim’s race.
lgmodel3 = glm(Freq/Total ~ factor.Defendant_Race., family = binomial,data = new_data,weight = Total)
anova(lgmodel3,test="Chi")
1- pchisq(deviance(lgmodel3),lgmodel3$df.residual)
# Question3(a) iv
# [Victim_Race Defendant_Race][Victim_Race Death_Penalty]
# [VD][VP]
# Given the victim’s race, sentence is independent of the defendant’s race.
lgmodel4 = glm(Freq/Total ~ factor.Victim_Race., family = binomial,data = new_data,weight = Total)
anova(lgmodel4,test="Chi")
1- pchisq(deviance(lgmodel4),lgmodel4$df.residual)
func1 = function(x) {
x1 = x[1]
x2 = x[2]
out = exp(x1^2 + x2^2) - 2 * (exp(x1) + exp(x2))
out
}
mle1 = nlm(f = func1, p = c(1, 1))
mle1
?nlm
func2 = function(z, q) {
if (z < 0 || z > 1)
return(1e+100) #to force nlm() search a solution in (0,1) interval
diff = (z/2 + z^3/3 + z^6/6 - q)^2
diff
}
genf = function(N) {
U = runif(N)
Z = rep(0, N)
for (i in 1:N) {
Ui = U[i]
mle2 = nlm(f = func2, p = 0.5, q = Ui)
Z[i] = mle2$estimate
}
Z
}
set.seed(1234)
Z = genf(1000)
hist(Z, main = "histogram of the generated data")
genXY = function(N) {
Ux = runif(N)
Uy = runif(N)
X = -0.5 + sqrt(0.25 + 2 * Ux)
Y = -X + sqrt(X^2 + Uy * (1 + 2 * X))
cbind(X, Y)
}
set.seed(1234)
Z = genXY(1000)
plot(Z, cex = 0.5, lwd = 2, main = "scatter plot of the generated data")
func1 = function(x) {
x1 = x[1]
x2 = x[2]
out = exp(x1^2 + x2^2) - 2 * (exp(x1) + exp(x2))
out
}
mle1 = nlm(f = func1, p = c(1, 1)) # Non-Linear Minimization
mle1
mle1 = nlm(f = func1)
nlm(f = func1, p = c(1, 1))$minimum
nlm(f = func1, p = c(1, 2))$minimum
nlm(f = func1, p = c(1, 0))$minimum
nlm(f = func1, p = c(0, 0))$minimum
nlm(f = func1, p = c(0, -1))$minimum
nlm(f = func1, p = c(-10, -1))$minimum
qnorm(0.5)
pnorm(50)
pnorm(0.5)
pnorm(0.25)
?pnorm
dnorm(0)
pnorm(x)
qnorm(0.5)
pnorm(x)
pnorm(0)
? nlm
func2 = function(z, q) {
if (z < 0 || z > 1)
return(1e+100) #to force nlm() search a solution in (0,1) interval
diff = (z/2 + z^3/3 + z^6/6 - q)^2 # CDF of Fz(x)
diff
print(z)
}
genf = function(N) {
U = runif(N)
Z = rep(0, N)
for (i in 1:N) {
Ui = U[i]
mle2 = nlm(f = func2, p = 0.5, q = Ui)
Z[i] = mle2$estimate
}
Z
}
set.seed(1234)
Z = genf(1000)
hist(Z, main = "histogram of the generated data")
func2 = function(z, q) {
if (z < 0 || z > 1)
return(1e+100) #to force nlm() search a solution in (0,1) interval
diff = (z/2 + z^3/3 + z^6/6 - q)^2 # CDF of Fz(x)
diff
print(z)
}
genf = function(N) {
U = runif(N)
Z = rep(0, N)
for (i in 1:N) {
Ui = U[i]
mle2 = nlm(f = func2, p = 0.5, q = Ui)
Z[i] = mle2$estimate
}
Z
}
set.seed(1234)
Z = genf(1000)
hist(Z, main = "histogram of the generated data")
func2 = function(z, q) {
if (z < 0 || z > 1)
return(1e+100) #to force nlm() search a solution in (0,1) interval
diff = (z/2 + z^3/3 + z^6/6 - q)^2 # CDF of Fz(x)
diff
}
genf = function(N) {
U = runif(N)
Z = rep(0, N)
for (i in 1:N) {
Ui = U[i]
mle2 = nlm(f = func2, p = 0.5, q = Ui)
Z[i] = mle2$estimate
}
Z
}
set.seed(1234)
Z = genf(1000)
hist(Z, main = "histogram of the generated data")
?nlm
func1 = function(x) { # x is an list that contains x1 and x2
x1 = x[1]
x2 = x[2]
out = exp(x1^2 + x2^2) - 2 * (exp(x1) + exp(x2))
out
}
mle1 = nlm(f = func1, p = c(1, 1)) # Non-Linear Minimization, parameter for the function
mle1
nlm(f = func1, p = c(10, 10))
nlm(f = func1, p = c(0, 0))
nlm(f = func1, p = c(0, 1))
nlm(f = func1, p = c(0, 1))$minimun
nlm(f = func1, p = c(0, 1))$minimum
nlm(f = func1, p = c(1, 1))$minimum
nlm(f = func1, p = c(1, 2))$minimum
nlm(f = func1, p = c(1, -3))$minimum
func2 = function(z, q) {
if (z < 0 || z > 1)
return(1e+100) #to force nlm() search a solution in (0,1) interval
diff = (z/2 + z^3/3 + z^6/6 - q)^2 # CDF of Fz(x)
diff
}
genf = function(N) {
U = runif(N)
Z = rep(0, N)
for (i in 1:N) {
Ui = U[i]
mle2 = nlm(f = func2, p = 0.5, q = Ui)
Z[i] = mle2$estimate
}
Z
}
set.seed(1234)
Z = genf(1000)
hist(Z, main = "histogram of the generated data")
Z
func2 = function(z, q) {
if (z < 0 || z > 1)
return(1e+100) #to force nlm() search a solution in (0,1) interval
diff = (z/2 + z^3/3 + z^6/6 - q)^2 # CDF of Fz(x)
diff
}
genf = function(N) {
U = runif(N)
Z = rep(0, N)
for (i in 1:N) {
Ui = U[i]
mle2 = nlm(f = func2, p = 0.5, q = Ui)
Z[i] = mle2$estimate
}
Z
}
set.seed(1234)
Z = genf(1000)
hist(Z, main = "histogram of the generated data")
func2 = function(z, q) {
if (z < 0 || z > 1)
return(1e+100) #to force nlm() search a solution in (0,1) interval
diff = (z/2 + z^3/3 + z^6/6 - q)^2 # CDF of Fz(x)
diff
}
genf = function(N) {
U = runif(N)
Z = rep(0, N)
for (i in 1:N) {
Ui = U[i]
mle2 = nlm(f = func2, p = 0.5, q = Ui)
Z[i] = mle2$estimate
}
Z
}
set.seed(90105)
Z = genf(10000)
hist(Z, main = "histogram of the generated data")
?integrate
genXY = function(N) {
Ux = runif(N)
Uy = runif(N)
X = -0.5 + sqrt(0.25 + 2 * Ux)
Y = -X + sqrt(X^2 + Uy * (1 + 2 * X))
cbind(X, Y)
}
set.seed(1234)
Z = genXY(1000)
plot(Z, cex = 0.5, lwd = 2, main = "scatter plot of the generated data")
pnorm(0)
pnorm(0)
qnorm(0.5)
genXY = function(N) {
Ux = runif(N)
Uy = runif(N)
X = -0.5 + sqrt(0.25 + 2 * Ux)
Y = -X + sqrt(X^2 + Uy * (1 + 2 * X))
cbind(X, Y)
}
set.seed(1234)
Z = genXY(100)
plot(Z, cex = 0.5, lwd = 2, main = "scatter plot of the generated data")
Z
genXY = function(N) {
Ux = runif(N)
Uy = runif(N)
X = -0.5 + sqrt(0.25 + 2 * Ux)
Y = -X + sqrt(X^2 + Uy * (1 + 2 * X))
cbind(X, Y)
}
set.seed(1234)
Z = genXY(100)
plot(Z, cex = 0.5, lwd = 2, main = "scatter plot of the generated data")
hist(Z[:,1], main = "histogram of the generated data")
genXY = function(N) {
Ux = runif(N)
Uy = runif(N)
X = -0.5 + sqrt(0.25 + 2 * Ux)
Y = -X + sqrt(X^2 + Uy * (1 + 2 * X))
cbind(X, Y)
}
set.seed(1234)
Z = genXY(100)
plot(Z, cex = 0.5, lwd = 2, main = "scatter plot of the generated data")
hist(Z[,1], main = "histogram of the generated data")
genXY = function(N) {
Ux = runif(N)
Uy = runif(N)
X = -0.5 + sqrt(0.25 + 2 * Ux)
Y = -X + sqrt(X^2 + Uy * (1 + 2 * X))
cbind(X, Y)
}
set.seed(1234)
Z = genXY(100)
plot(Z, cex = 0.5, lwd = 2, main = "scatter plot of the generated data")
hist(Z[,1], main = "histogram of the generated X data")
hist(Z[,2], main = "histogram of the generated Y data")
pearson(Z[,1],Z[,2])
cor(Z[,1],Z[,2], method = 'pearson')
